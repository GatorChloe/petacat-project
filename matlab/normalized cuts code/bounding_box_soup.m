function [ bounding_boxes ] = bounding_box_soup ( image, segmentation, k_min, k_max )
%Run image segmentation on source <image> for <k_max> - <k_min> number of 
%times. For each segmentation use number of segments from <k_min> to <k_max>
%interval.  Return an array of <bounding_boxes> outlining all segments
%produced by the segmentation.
%input:
%<image> b/w input image
%<segmentation> switch if 0 then run multiscale segmentataion, 
%                      if 1 run N-Cut-Segmentation
%<k_min> segment image starting with k_min number of segments 
%<k_max> segment image until k_max number of segments 
% output:
%<bounding_boxes> return a soup of bounding boxes generated by
%segmentations from <k_min> to <k_max> number of segmentations
%<bounding_boxes> is an array where each array row represents one bounding box
%and each column represents box's [x_coord, y_coord, width, height]

for nsegs=k_min : k_max
    %get image segmentations
    if segmentation == 0
        [classes,~,~,~,~,~,~] = ncut_multiscale(image,nsegs);
    elseif segmentation == 1
        [classes,~,~,~,~,~] = NcutImage(image,nsegs);
    else
        disp('Illegal segmentation switch');
    end     
    %get bounding boxes for segmentated image
    [boxes]=box_segments(classes);
    %accumulate results
    if nsegs == k_min
       bounding_boxes = boxes;
    else
        %append boxes to the result array
        bounding_boxes=vertcat(bounding_boxes, boxes);
    end
end

end

