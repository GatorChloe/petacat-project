Unpack code to folder XYZ
Open MatLab and change current folder to XYZ: cd /{PATH}/XYZ;
In Command line complile following files: compileDir(pwd);
run main.m as a "pseudo" demo

______________________________________________________________________________
[ bounding_boxes ] = bounding_box_soup ( image, segmentation, k_min, k_max )
Run image segmentation on source <image> for <k_max> - <k_min> number of 
times. For each segmentation use number of segments from <k_min> to <k_max>
interval.  Return an array of <bounding_boxes> outlining all segments
produced by the segmentation.
input:
<image> b/w input image
<segmentation> switch if 0 then run multiscale segmentataion, 
                      if 1 run N-Cut-Segmentation
<k_min> segment image starting with k_min number of segments 
<k_max> segment image until k_max number of segments 
 output:
<bounding_boxes> return a soup of bounding boxes generated by
segmentations from <k_min> to <k_max> number of segmentations
<bounding_boxes> is an array where each array row represents one bounding box
and each column represents box's [x_coord, y_coord, width, height]

______________________________________________________________________________
save_bounding_boxes(fn, bounding_boxes )
Save <bounding_boxes> array to a new file <fn>
input:
<fn> file name 
<bounding_boxes> is an array where each array row represents one bounding box
and each column represents box's [x_coord, y_coord, width, height]

______________________________________________________________________________
[ boxes ] = box_segments(image)
BOX_SEGMENTS takes <image> that is a segmented map showing all segments
as unique indexes.
 retrunes <boxes> that are rectangles outlining all segments
 each line of boxes represents one rectangle box with [x, y, w, h] 

[mismatched_image, n_mismatched_pixels] = segment_matching(m,t_n)
segment_matching(m,t_n) matches segments in pivot image <m> against segments
in image <t_n> 
output:
<mismatched_image> shows total number of mismatched pixels as an image
<n_mismatched_pixels> is a total number of mismatched pixes im <mismatched_image> 
input:
<m>, <t_n> are 2D image arrays showing segment maps indexed with unique integer
indexes 
<m> is the pivot segment map
<t_n> is the segment map copared with  

[ noisy_image ] = add_noise(image,p)
 adds <p> percent amount of uniform noise to the <image>
 p/2 uniformly selected pixels are colored black then another
 p/2 uniformly selected pixels are colored white
 add_noise(image, 0.2); adds 20% of B/W noise to image
input:
<image> must be a 2-D array with values between <0,1>
<p> percent amount of uniform noise value from 0.00 to 1.0 


[ im_segmented, k] = stable_segmentation( image, segmentation, noise_min, noise_max, step, k_min, k_max )
stable_segmentation: performs stable segmentation based on 
 "Model order selection and cue combination of image segmentation" by Rabinovich et al.
 using multiscale segmentation from "Spectral segmentation with multiscale
 graph decomposition" by T. Cour et al.
input: 
<image> original b/w image
<segmentation> switch if 0 then run multiscale segmentataion, 
                      if 1 run N-Cut-Segmentation
<noise_min> perturbe images adding noise_min value
<noise_max> until perturbations given by noise_max
<step> incrementally adding step amount of noise
<k_min> test segmentation for k_min segments to <k_max> segments with increment=1
output: 
<im_segmented> segmented image for most stable segmentation from given
parameters
<k> number of segments for which segmentation was the most stable
